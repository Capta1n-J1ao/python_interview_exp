import collections
from typing import List

visited = [[]]


def numIslands(grid: List[List[str]]) -> int:
    if grid is None or len(grid) == 0:
        return 0
    row = len(grid)
    col = len(grid[0])
    global visited
    # print(visited)
    visited = [[False for col in range(col)] for row in range(row)]
    res = 0
    for i in range(row):
        for k in range(col):
            if grid[i][k] == '0' or visited[i][k]:
                continue
            BFS(grid, i, k)
            res += 1
    return res


def BFS(grid, row, col):
    deque = collections.deque()
    deque.appendleft((row, col))
    #global visited
    visited[row][col] = True
    while len(deque) != 0:
        curRow, curCol = deque.pop()
        # print("row is ", curRow, "col is ", curCol)
        # visited[curRow][curCol] = True
        for x, y in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
            dx = curRow + x
            dy = curCol + y
            if 0 <= dx < len(grid) and 0 <= dy < len(grid[0]) and grid[dx][dy] == '1' and not visited[dx][dy]:
                deque.appendleft((dx, dy))
                # 下面这句很关键，像一种情况，比如deque存入坐标A，他可以延伸到坐标B，而且B是合法的
                # 如果没有下面这句话，那么当deque还没有处理到A的时候，如果有另一个坐标C也能到B，那么B就会重复进入deque
                visited[dx][dy] = True


# print(Solution().numIslands([["1","1","1","1","0"],["1","1","0","1","0"],["1","1","0","0","0"],["0","0","0","0","0"]]))
print(numIslands(
    [["1", "1", "0", "0", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]))
# print(Solution().numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))
